{
  "hash": "6bc630ee1e7b2140df4ca95195a8960c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Supply Chain Data Analytics\nsubtitle: Analyzing and Forcasting Supermarket Sales\nauthors:\n  - name: Stan Brouwer\n    orchid: 0009-0006-3447-0096\n    affiliation: Vrije Universiteit\n    corresponding: true\n  - name: Liz Chan\n    affiliation: Master TSCM\n  - name: Maaike Lamberst\n    affiliation: Supply Chain Data analysis\n  - name: Niek Schroor\n    affiliation: Group 10\n\ndate: last-modified\nbibliography: references.bib\ncitation:\n  container-title: Earth and Space Science\nnumber-sections: true\n---\n\n\n\n<h2>Introduction</h2>\n\nWe analyze, forecast and interpret the [Superstore sales](https://public.tableau.com/app/sample-data/sample_-_superstore.xls) provided by [Tableau](https://public.tableau.com/app/learn/sample-data) using different statistical and machine learning methods.\n\nWe describe our work in the PDF version. However, we would like to recommend reading our quarto manuscript *here* as it contains the **relevant** R code in the Article Notebook.\n\n## Data Pre-processing\n\nThe superstore data set we selected is of high quality. Thus we do the required data pre-processing, but included the hypothetical steps we would take were our data of lower quality to communicate our understanding of the data pre-processing process.\n\nWe took the following pre-processing steps:\n\n\n\n::: {.cell .hidden}\n\n```{.r .cell-code .hidden}\n# Clear workspace\nrm(list = ls())\n# Function to load (and install if necessary) dependencies\ninstall_and_load <- function(packages) {\n  install.packages(setdiff(packages, rownames(installed.packages())), dependencies = TRUE)\n  invisible(lapply(packages, require, character.only = TRUE))\n}\ninstall_and_load(c(\"tidyverse\", \"readxl\", \"ggplot2\", \"lubridate\", \"stats\", \"Amelia\",\"forecast\", \"tseries\", \"plotly\", \"stringr\", \"knitr\"))\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: tidyverse\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\nLoading required package: readxl\n\nLoading required package: Amelia\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'Amelia' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: Rcpp\n## \n## Amelia II: Multiple Imputation\n## (Version 1.8.3, built: 2024-11-07)\n## Copyright (C) 2005-2024 James Honaker, Gary King and Matthew Blackwell\n## Refer to http://gking.harvard.edu/amelia/ for more information\n## \nLoading required package: forecast\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'forecast' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \nLoading required package: tseries\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'tseries' was built under R version 4.3.3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nLoading required package: plotly\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\nLoading required package: knitr\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: package 'knitr' was built under R version 4.3.3\n```\n\n\n:::\n:::\n\n\n\n-   Improved column names by removing whitespaces\n-   Removed the <code>Row_ID</code> column as it can be inferred by it's index\n-   Removed all columns with a single unique value, as storing these would be [redundant](https://few.vu.nl/~molenaar/courses/StatR/chapters/B-06-raw_data.html)\n-   Ensured machine-readable date formats in yyyy-mm-dd as these usually differ per locale.\n-   Ensured proper decimal separators\n-   Calculated the number of missing values (both NA and empty string \"\") per column.\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Load the data\nsuppressWarnings({data <- read_excel(\"data/sample_-_superstore.xls\")}) # The Postal code column is stored as 'text' but coerced to numeric, causing warnings which we suppress\n\n# Improve column names (replace \" \"with \"_\")\ncolnames(data) <- str_replace_all(colnames(data), \" \", \"_\")\n\n# Remove the 'Row_ID' column as it can be inferred by it's index\ndata <- subset(data, select = -`Row_ID`)\n\n# Remove all columns that have only one unique value, as storing these would be redundant\ndata <- data[, sapply(data, function(col) length(unique(col)) > 1)]\n\n# Ensure a machine-readable date format as these are usually horrible in excel files\ndata$Order_Date <- as.Date(data$Order_Date, format = \"%Y-%m-%d\")\ndata$Ship_Date <- as.Date(data$Ship_Date, format = \"%Y-%m-%d\")\n\n# The readxl package by default uses the correct decimal separator (as opposed to base R)\n\n# Calculate the number of missing values per column.\n# Origional dates and R date objects are in unix time, which return NA when compared to text (empty string). These dates are stored as 'double' datatype, Thus we check character columns for empty strings, and all columns for NA values. \nmissing_values <- sapply(data, function(col) {\n  if (inherits(col, \"Date\")) {\n    sum(is.na(col))\n  } else if (is.character(col)) {\n    sum(is.na(col) | col == \"\")\n  } else {\n    sum(is.na(col))\n  }\n})\n\n\nif (sum(missing_values) == 0) {\n  print(\"None of the columns contains missing values\") # We print to enforce the \"Source: Article notebook\n  } else {\n  print(\"Some columns contain missing values\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"None of the columns contains missing values\"\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Optionally, print the missing values as a nice table\nmissing_values_table <- data.frame(\n  Column = names(missing_values),\n  Missing_or_Empty = missing_values\n)\n# Note that there are no missing values, thus we do not print them\n# kable(missing_values_table, caption = \"Missing or Empty Values in Columns\", format = \"pipe\")\n\n\nrm(missing_value, missing_values_table)\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning in rm(missing_value, missing_values_table): object 'missing_value' not\nfound\n```\n\n\n:::\n:::\n\n\n\nAfter these steps (and transposing the table for better document formatting), the data looks as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\nkable(t(head(data, 3)), caption = \"First 5 Rows of the Data (Transposed)\", format = \"markdown\")\n```\n\n::: {.cell-output-display}\n\n\nTable: First 5 Rows of the Data (Transposed)\n\n|              |                                  |                                                            |                                                          |\n|:-------------|:---------------------------------|:-----------------------------------------------------------|:---------------------------------------------------------|\n|Order_ID      |CA-2016-152156                    |CA-2016-152156                                              |CA-2016-138688                                            |\n|Order_Date    |2016-11-08                        |2016-11-08                                                  |2016-06-12                                                |\n|Ship_Date     |2016-11-11                        |2016-11-11                                                  |2016-06-16                                                |\n|Ship_Mode     |Second Class                      |Second Class                                                |Second Class                                              |\n|Customer_ID   |CG-12520                          |CG-12520                                                    |DV-13045                                                  |\n|Customer_Name |Claire Gute                       |Claire Gute                                                 |Darrin Van Huff                                           |\n|Segment       |Consumer                          |Consumer                                                    |Corporate                                                 |\n|City          |Henderson                         |Henderson                                                   |Los Angeles                                               |\n|State         |Kentucky                          |Kentucky                                                    |California                                                |\n|Postal_Code   |42420                             |42420                                                       |90036                                                     |\n|Region        |South                             |South                                                       |West                                                      |\n|Product_ID    |FUR-BO-10001798                   |FUR-CH-10000454                                             |OFF-LA-10000240                                           |\n|Category      |Furniture                         |Furniture                                                   |Office Supplies                                           |\n|Sub-Category  |Bookcases                         |Chairs                                                      |Labels                                                    |\n|Product_Name  |Bush Somerset Collection Bookcase |Hon Deluxe Fabric Upholstered Stacking Chairs, Rounded Back |Self-Adhesive Address Labels for Typewriters by Universal |\n|Sales         |261.96                            |731.94                                                      |14.62                                                     |\n|Quantity      |2                                 |3                                                           |2                                                         |\n|Discount      |0                                 |0                                                           |0                                                         |\n|Profit        |41.9136                           |219.5820                                                    |6.8714                                                    |\n\n\n:::\n:::\n\n\n\nThere is some more processing to do, for instance the removing of outliers. However, by doing so we impose our own assumptions on the data. Let's start by evaluating the descriptive statistics of our data and check if further processing is required. \n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\ndescriptive_statistics <- function(column) {\n  if (is.numeric(column)) {\n    stats <- list(\n      Min = min(column, na.rm = TRUE), # Note that handling NA values increases robustness (and I copied the funciton from some of my earlier work)\n      Max = max(column, na.rm = TRUE),\n      Mean = mean(column, na.rm = TRUE),\n      Median = median(column, na.rm = TRUE),\n      StdDev = sd(column, na.rm = TRUE)\n    )\n  } else if (inherits(column, \"Date\")) {\n    stats <- list(\n      Earliest = format(min(column, na.rm = TRUE), \"%Y-%m-%d\"),\n      Latest = format(max(column, na.rm = TRUE), \"%Y-%m-%d\")\n    )\n  } else if (is.character(column)) {\n    stats <- list(\n      Unique = length(unique(column)),\n      Mode = names(sort(table(column), decreasing = TRUE)[1])\n    )\n  } else {\n    stats <- NULL\n  }\n  return(stats)\n}\n\n# Call function on dataframe\ndescriptive_stats <- lapply(data, descriptive_statistics)\n\n# Separate to tables dependent on data type\nnumeric_stats <- as.data.frame(do.call(rbind, lapply(names(data), function(col_name) {\n  if (is.numeric(data[[col_name]])) {\n    c(Column = col_name, descriptive_stats[[col_name]])\n  }\n})), stringsAsFactors = FALSE)\ndate_stats <- as.data.frame(do.call(rbind, lapply(names(data), function(col_name) {\n  if (inherits(data[[col_name]], \"Date\")) {\n    c(Column = col_name, descriptive_stats[[col_name]])\n  }\n})), stringsAsFactors = FALSE)\ncharacter_stats <- as.data.frame(do.call(rbind, lapply(names(data), function(col_name) {\n  if (is.character(data[[col_name]])) {\n    c(Column = col_name, descriptive_stats[[col_name]])\n  }\n})), stringsAsFactors = FALSE)\n\n# Output tables\nkable(\n  numeric_stats,\n  caption = \"Descriptive Statistics for Numeric Columns\",\n  format = \"pipe\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Descriptive Statistics for Numeric Columns\n\n|Column      |Min       |Max      |Mean      |Median  |StdDev   |\n|:-----------|:---------|:--------|:---------|:-------|:--------|\n|Postal_Code |1040      |99301    |55190.38  |56430.5 |32063.69 |\n|Sales       |0.444     |22638.48 |229.858   |54.49   |623.2451 |\n|Quantity    |1         |14       |3.789574  |3       |2.22511  |\n|Discount    |0         |0.8      |0.1562027 |0.2     |0.206452 |\n|Profit      |-6599.978 |8399.976 |28.6569   |8.6665  |234.2601 |\n\n\n:::\n\n```{.r .cell-code .hidden}\nkable(\n  date_stats,\n  caption = \"Descriptive Statistics for Date Columns\",\n  format = \"pipe\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Descriptive Statistics for Date Columns\n\n|Column     |Earliest   |Latest     |\n|:----------|:----------|:----------|\n|Order_Date |2014-01-03 |2017-12-30 |\n|Ship_Date  |2014-01-07 |2018-01-05 |\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Let's not render the character table as it contains little relevant information\n#kable(\n#  character_stats,\n#  caption = \"Descriptive Statistics for Text Columns\",\n#  format = \"pipe\")\n```\n:::\n\n\n\nWe inspected the orders with the lowest and highers price (<code>Sales</code> in USD). The most expensive orders were professional printers, camera's and teleconferencing units with high unit prices, and these orders often were of high <code>Quantity</code>. The orders with the lowest price where often binders, had a high <code>Discount</code> rate, and often a <code>Quantity</code> of just one. \n\nWe were fascinated by the orders with a negative <code>profit</code>. These all had high <code>Discount</code> rates, and often concerned the same items, such as the <code>Cubify CubeX 3D Printer Triple Head Print</code>. The orders with a negative <code>Profit</code> where often part of a larger order (for instance <code>CA-2016-108196</code>), and placed by customers that placed multiple orders. We suspect these negative <code>Profit</code>'s to be caused by faulty items that receive discounts, general discount codes, or volumne discounts. However, due to especially the high discounts on orders with negative profits, we assume these to be valid orders. This decision has also been influenced by the high quality of the data. As we found no missing values whatshowever, we suspect the chance of some weird but valid orders to be higher than encountering mistakes here. *[this paragraph could use some rewriting]*\n\n\n## Data Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\n# Sum of Quantity for top products\ntop_products <- data %>%\n  group_by(Product_Name) %>%\n  summarize(total_quantity = sum(Quantity, na.rm = TRUE)) %>%\n  arrange(desc(total_quantity)) %>%\n  slice_head(n = 20) %>%  # Top 20 products\n  mutate(ProdName8 = substr(Product_Name, 1, 8)) # Truncate product names to the first 8 characters\n\n# View the result\ntop_products\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 3\n   Product_Name                                         total_quantity ProdName8\n   <chr>                                                         <dbl> <chr>    \n 1 Staples                                                         215 \"Staples\"\n 2 Staple envelope                                                 170 \"Staple …\n 3 Easy-staple paper                                               150 \"Easy-st…\n 4 Staples in misc. colors                                          86 \"Staples…\n 5 KI Adjustable-Height Table                                       74 \"KI Adju…\n 6 Avery Non-Stick Binders                                          71 \"Avery N…\n 7 Storex Dura Pro Binders                                          71 \"Storex …\n 8 GBC Premium Transparent Covers with Diagonal Lined …             67 \"GBC Pre…\n 9 Situations Contoured Folding Chairs, 4/Set                       64 \"Situati…\n10 Staple-based wall hangings                                       62 \"Staple-…\n11 Chromcraft Round Conference Tables                               61 \"Chromcr…\n12 Eldon Wave Desk Accessories                                      61 \"Eldon W…\n13 Staple remover                                                   61 \"Staple …\n14 Global Wood Trimmed Manager's Task Chair, Khaki                  59 \"Global …\n15 Wilson Jones Turn Tabs Binder Tool for Ring Binders              59 \"Wilson …\n16 Kingston Digital DataTraveler 16GB USB 2.0                       57 \"Kingsto…\n17 Fellowes Officeware Wire Shelving                                55 \"Fellowe…\n18 Global High-Back Leather Tilter, Burgundy                        54 \"Global …\n19 SAFCO Arco Folding Chair                                         53 \"SAFCO A…\n20 Xerox 226                                                        53 \"Xerox 2…\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Plot with ggplot and ggplotly\nggplot(top_products, aes(x = reorder(ProdName8, -total_quantity), y = total_quantity)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Top 20 Most Sold Products\",\n       x = \"Product ID\",\n       y = \"Total Quantity\") +\n  theme_minimal() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-docx/data_viz1-1.png)\n:::\n\n```{.r .cell-code .hidden}\n# Aggregate quantity by Product Name and Order Date to create a time series\ntime_series_data <- data %>%\n  group_by(Product_Name, Order_Date) %>%\n  summarize(total_quantity = sum(Quantity, na.rm = TRUE)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\n`summarise()` has grouped output by 'Product_Name'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code .hidden}\n# Filter for the top products by total quantity sold (adjust as needed)\ntop_products <- time_series_data %>%\n  group_by(Product_Name) %>%\n  summarize(total_quantity = sum(total_quantity)) %>%\n  arrange(desc(total_quantity)) %>%\n  slice_head(n = 10)  # Select top 10 products\n\n# Filter the time-series data for only these top products\nfiltered_time_series_data <- time_series_data %>%\n  filter(Product_Name %in% top_products$Product_Name) %>%\n  mutate(ProdName8 = substr(Product_Name, 1, 8)) # Product names can be quite long and mess up layouts. Lets only plot the first 8 chars.\n\n\n# Plot using the truncated product name\nggplot(filtered_time_series_data, aes(x = Order_Date, y = total_quantity, color = ProdName8)) +\n  geom_line(size = 1) +\n  labs(title = \"Quantity Sold Over Time per Product\",\n       x = \"Order Date\",\n       y = \"Quantity Sold\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_color_discrete(name = \"Product Name\")\n```\n\n::: {.cell-output .cell-output-stderr .hidden}\n\n```\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-docx/data_viz1-2.png)\n:::\n\n```{.r .cell-code .hidden}\n# Count frequency of top 20 products\ntop_products <- data %>%\n  count(Product_Name, sort = TRUE) %>%\n  top_n(20, n) %>%\n  mutate(ProdName8 = substr(Product_Name, 1, 8))\n\n# Plot!\nggplot(top_products, aes(x = reorder(`ProdName8`, -n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Top 20 Most Sold Products\",\n       x = \"Product Name\",\n       y = \"Quantity sold\") +\n  theme_minimal() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-docx/data_viz1-3.png)\n:::\n:::\n\n\n\n\n\nThis is a simple placeholder for the manuscript's main document [@knuth84].\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Introduction\n\n\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\neruptions <- c(1492, 1585, 1646, 1677, 1712, 1949, 1971, 2021)\nn_eruptions <- length(eruptions)\n```\n:::\n\n::: {#cell-fig-timeline .cell}\n\n```{.r .cell-code .hidden}\npar(mar = c(3, 1, 1, 1) + 0.1)\nplot(eruptions, rep(0, n_eruptions), \n  pch = \"|\", axes = FALSE)\naxis(1)\nbox()\n```\n\n::: {.cell-output-display}\n![Timeline of recent earthquakes on La Palma](index_files/figure-docx/fig-timeline-1.png){#fig-timeline fig-alt='An event plot of the years of the last 8 eruptions on La Palma.'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code .hidden}\navg_years_between_eruptions <- mean(diff(eruptions[-n_eruptions]))\navg_years_between_eruptions\n```\n\n::: {.cell-output .cell-output-stdout .hidden}\n\n```\n[1] 79.83333\n```\n\n\n:::\n:::\n\n\n\nBased on data up to and including 1971, eruptions on La Palma happen every 79.8 years on average.\n\nStudies of the magma systems feeding the volcano, such as @marrero2019, have proposed that there are two main magma reservoirs feeding the Cumbre Vieja volcano; one in the mantle (30-40km depth) which charges and in turn feeds a shallower crustal reservoir (10-20km depth).\n\nEight eruptions have been recorded since the late 1400s (@fig-timeline).\n\nData and methods are discussed in @sec-data-methods.\n\nLet $x$ denote the number of eruptions in a year. Then, $x$ can be modeled by a Poisson distribution\n\n$$\np(x) = \\frac{e^{-\\lambda} \\lambda^{x}}{x !}\n$$ {#eq-poisson}\n\nwhere $\\lambda$ is the rate of eruptions per year. Using @eq-poisson, the probability of an eruption in the next $t$ years can be calculated.\n\n| Name                 | Year   |\n| -------------------- | ------ |\n| Current              | 2021   |\n| Teneguía             | 1971   |\n| Nambroque            | 1949   |\n| El Charco            | 1712   |\n| Volcán San Antonio   | 1677   |\n| Volcán San Martin    | 1646   |\n| Tajuya near El Paso  | 1585   |\n| Montaña Quemada      | 1492   |\n\n: Recent historic eruptions on La Palma {#tbl-history}\n\n@tbl-history summarises the eruptions recorded since the colonization of the islands by Europeans in the late 1400s.\n\n![Map of La Palma](images/la-palma-map.png){#fig-map}\n\nLa Palma is one of the west most islands in the Volcanic Archipelago of the Canary Islands (@fig-map). \n\n## Data & Methods {#sec-data-methods}\n\n## Conclusion\n\n## References {.unnumbered}\n\n:::{#refs}\n\n:::",
    "supporting": [
      "index_files/figure-docx"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}